{"version":3,"sources":["component/navigation/NavigationBar.js","SlideAnotherView.js","AppRoot.js","serviceWorker.js","index.js"],"names":["activeStyle","backgroundColor","color","borderRadius","border","NavigationBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_toggle","bind","assertThisInitialized","state","isOpen","setState","location","react_default","a","createElement","react","Navbar","light","expand","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","style","pathname","href","React","PureComponent","withRouter","SlideAnotherView","prevProps","prevState","window","scroll","top","left","behavior","children","Component","RouterRoot","Route","exact","path","render","AppRoot","HashRouter","src_SlideAnotherView","navigation_NavigationBar","Switch","AppRoot_RouterRoot","Boolean","hostname","match","ReactDOM","src_AppRoot","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90eb309f.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\r\nimport { Link, withRouter } from 'react-router-dom';\r\n\r\nconst activeStyle = {\r\n    backgroundColor : 'deepskyblue',\r\n    color : 'black',\r\n    borderRadius : '5px',\r\n    border : '2px solid lightskyblue'\r\n}\r\n\r\nclass NavigationBar extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this._toggle = this._toggle.bind(this);\r\n        this.state = {\r\n            isOpen: false\r\n        };\r\n    }\r\n    \r\n    _toggle() {\r\n        const { isOpen } = this.state; \r\n        this.setState({\r\n            isOpen: !isOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { location } = this.props;\r\n        const { isOpen } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <Navbar color=\"info\" light expand=\"md\">\r\n                    <NavbarBrand tag={Link} to=\"/\">Kang Portfolio</NavbarBrand>\r\n                    <NavbarToggler onClick={this._toggle} />\r\n                    <Collapse isOpen={isOpen} navbar>\r\n                    <Nav className=\"ml-auto\" navbar>\r\n                        <NavItem>\r\n                            <NavLink style={ location.pathname === '/' ? activeStyle : null } tag={Link} to=\"/\">\r\n                                <i className=\"fas fa-home\" /> Home\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink style={ location.pathname === '/intro' ? activeStyle : null } tag={Link} to=\"/intro\">\r\n                                <i className=\"fas fa-user-tie\" /> Introduce\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink style={ location.pathname === '/project' ? activeStyle : null } tag={Link} to=\"/project\"> \r\n                                <i className=\"fas fa-tasks\" /> Project\r\n                            </NavLink>\r\n                        </NavItem> \r\n                        <NavItem>\r\n                            <NavLink style={ location.pathname === '/skill' ? activeStyle : null } tag={Link} to=\"/skill\"> \r\n                                <i className=\"fab fa-react\" /> Skill\r\n                            </NavLink>\r\n                        </NavItem> \r\n                        <NavItem>\r\n                            <NavLink href=\"https://github.com/tails5555/prography-front\">\r\n                                <i className=\"fab fa-github\" /> Ref Git\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink href=\"https://tails5555.github.io\">\r\n                                <i className=\"fas fa-user-tag\" /> Blog\r\n                            </NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                    </Collapse>\r\n                </Navbar>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(NavigationBar);","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass SlideAnotherView extends React.Component {\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.location !== prevProps.location) {\r\n            window.scroll({\r\n                top : 0,\r\n                left : 0,\r\n                behavior: \"smooth\"\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { children } = this.props;\r\n        return children;\r\n    }\r\n}\r\n\r\nexport default withRouter(SlideAnotherView);","import React, { Fragment } from 'react';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { NavigationBar } from './component/navigation';\r\nimport SlideAnotherView from './SlideAnotherView';\r\n\r\nconst RouterRoot = () => (\r\n    <Fragment>\r\n        <Route exact path=\"/\" render={() => <h1>HOME</h1>} />\r\n        <Route exact path=\"/intro\" render={() => <h1>INTRODUCE</h1>} />\r\n        <Route exact path=\"/project\" render={() => <h1>PROJECTS</h1>} />\r\n        <Route exact path=\"/skill\" render={() => <h1>SKILLS</h1>} />\r\n    </Fragment>\r\n);\r\n\r\nconst AppRoot = () => (\r\n    <Router>\r\n        <SlideAnotherView>\r\n            <NavigationBar />\r\n            <Switch>\r\n                <RouterRoot />\r\n            </Switch>\r\n        </SlideAnotherView>\r\n    </Router>\r\n);\r\n\r\nexport default AppRoot;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppRoot from './AppRoot';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppRoot />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}